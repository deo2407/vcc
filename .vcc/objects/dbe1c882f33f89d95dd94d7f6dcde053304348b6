blob 1489
#include "object.h"

#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <openssl/sha.h>

// "blob CONTENT_SIZE\n" + content
char *serialize_obj(char *content, size_t content_size, obj_type_t type) {
    const char *type_str = (type == BLOB) ? "blob" : "tree";

    char header[64];
    int header_size = snprintf(header, sizeof header, "%s %zu\n", type_str, content_size);
    
    size_t out_size = header_size + content_size;
    char *serialized = (char *)malloc(out_size);
    if (!serialized)
        return NULL;

    memcpy(serialized, header, header_size);
    memcpy(serialized + header_size, content, content_size);

    return serialized;
}

void binary_to_hex(const unsigned char *buf, int len, char *out) {
    const char hex[] = "0123456789abcdef";
    for (int i = 0; i < len; i++) {
        out[i * 2] = hex[(buf[i] >> 4) & 0xF];
        out[i * 2 + 1] = hex[buf[i] & 0xF];
    } 
    out[len * 2] = '\0';
}

void generate_hash_filename(char *contents, long size, char *buf, size_t buf_size) {
    // create the hash for the given object
    char hash[SHA_DIGEST_LENGTH * 2];
    get_hash(contents, size, hash, sizeof hash);

    // generate the filename
    snprintf(buf, buf_size, ".vcc/objects/%s", hash);
}

void get_hash(char *contents, long contents_size, char *buf, size_t buf_size) {
    unsigned char hash_bin[SHA_DIGEST_LENGTH];
    SHA1((unsigned char *)contents, contents_size, hash_bin);
    binary_to_hex(hash_bin, SHA_DIGEST_LENGTH, buf);
}
